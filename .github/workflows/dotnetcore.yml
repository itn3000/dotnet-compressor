name: .NET Core Build

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ["ubuntu-18.04", "windows-latest", "macos-latest"]
        rid: ["linux-x64", "win-x64", "osx-x64"]
        linker: ["", "clang-6.0"]
        exclude:
          - os: "windows-latest"
            rid: "linux-x64"
          - os: "macos-latest"
            rid: "linux-x64"
          - os: "ubuntu-18.04"
            rid: "win-x64"
          - os: "macos-latest"
            rid: "win-x64"
          - os: "windows-latest"
            rid: "osx-x64"
          - os: "ubuntu-18.04"
            rid: "osx-x64"
          - os: "windows-latest"
            linker: "clang-6.0"
          - os: "ubuntu-18.04"
            linker: ""
          - os: "macos-latest"
            linker: "clang-6.0"
    env:
      CppCompilerAndLinker: ${{ matrix.linker }}
    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET Core 2.1
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: "2.1.607"
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: "3.0.101"
    - name: restore dotnet tool
      run: dotnet tool restore
    - name: Build with dotnet(Release)
      run: dotnet tool run dotnet-cake build.cake -Configuration=Release -IsRelease
      if: matrix.os == 'windows-latest' && startsWith(github.ref, 'refs/tags/')
    - name: Build with dotnet(Development)
      run: dotnet tool run dotnet-cake build.cake -Configuration=Release
      if: matrix.os == 'windows-latest' && !startsWith(github.ref, 'refs/tags/')
    - name: push development nuget package
      run: "dotnet tool run dotnet-cake build.cake \"-Configuration=Release\" \"-Target=NuGet.Push.GitHub\" \"-Username=itn3000\" \"-Password=${{ secrets.GITHUB_TOKEN }}\""
      if: matrix.os == 'windows-latest' && endsWith(github.ref, 'master')
    - name: collect nuget package as artifact
      uses: actions/upload-artifact@v1
      with:
        name: nupkg-${{matrix.rid}}
        path: dist/Release/nupkg
      if: matrix.os == 'windows-latest'
    - name: update apt cache
      run: sudo apt-get update 
      if: matrix.os == 'ubuntu-18.04'
    - name: installing prerequisit packages for corert
      run: sudo apt-get install -y libkrb5-dev zlib1g-dev
      if: matrix.os == 'ubuntu-18.04'
    - name: build native binary
      run: dotnet tool run dotnet-cake build.cake -Configuration=Release -Target=Native -Runtime=${{matrix.rid}}
    - name: stripping binary
      run: strip dist/Release/bin/dcomp-${{matrix.rid}}
      if: matrix.os != 'windows-latest'
    - name: collect native binary as artifact
      uses: actions/upload-artifact@v1
      with:
        name: bin-${{matrix.rid}}
        path: dist/Release/bin
  release:
    runs-on: "windows-latest"
    needs: ["build"]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: downloading nuget package
        uses: actions/download-artifact@v1
        with:
          name: "nupkg-win-x64"
          path: nupkg
      - name: downloading win-x64 binary
        uses: actions/download-artifact@v1
        with:
          name: "bin-win-x64"
          path: win-x64
      - name: downloading osx-x64 binary
        uses: actions/download-artifact@v1
        with:
          name: "bin-osx-x64"
          path: osx-x64
      - name: downloading linux-x64 binary
        uses: actions/download-artifact@v1
        with:
          name: "bin-linux-x64"
          path: linux-x64
      - name: create github release
        uses: actions/create-release@v1
        id: create_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{github.ref}}
          draft: true
          prerelease: false
          release_name: "Release ${{github.ref}}"
      - name: extract tag name
        uses: frabert/replace-string-action@v1
        with:
          pattern: ".*/"
          string: ${{github.ref}}
          replace-with: ""
        id: extract_tag_name
      - name: publish nupkg as github release assets
        uses: actions/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: nupkg/dotnet-compressor.${{ steps.extract_tag_name.replaced }}.nupkg
          asset_name: dotnet-compressor.${{ steps.extract_tag_name.replaced }}.nupkg
          asset_content_type: application/zip
      - name: publish snupkg as github release assets
        uses: actions/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: nupkg/dotnet-compressor.${{ steps.extract_tag_name.replaced }}.snupkg
          asset_name: dotnet-compressor.${{ steps.extract_tag_name.replaced }}.snupkg
          asset_content_type: application/zip
      - name: publish macos binary as github release assets
        uses: actions/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: osx-x64/dcomp-osx-x64
          asset_name: dcomp-osx-x64
          asset_content_type: application/octet-binary
      - name: publish linux binary as github release assets
        uses: actions/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: linux-x64/dcomp-linux-x64
          asset_name: dcomp-linux-x64
          asset_content_type: application/octet-binary
      - name: publish windows binary as github release assets
        uses: actions/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: win-x64/dcomp-win-x64.exe
          asset_name: dcomp-win-x64.exe
          asset_content_type: application/octet-binary
      - name: publish windows binary pdb as github release assets
        uses: actions/upload-release-assets@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{steps.create_release.outputs.upload_url}}
          asset_path: win-x64/dcomp-win-x64.pdb
          asset_name: dcomp-win-x64.pdb
          asset_content_type: application/octet-binary
      - name: upload nupkg to nugetorg
        run: dotnet run tool dotnet-cake -Target=NuGet -ApiKey=${{secrets.NUGET_API_KEY}} -Configuration=Release